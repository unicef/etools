# -*- coding: utf-8 -*-
# Generated by Django 1.9.10 on 2017-06-07 15:09
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_fsm
import model_utils.fields


class Migration(migrations.Migration):

    dependencies = [
        ('partners', '0029_auto_20170517_2017'),
        ('audit', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DetailedFindingInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('finding', models.TextField(verbose_name='finding')),
                ('recommendation', models.TextField(verbose_name='recommendation')),
            ],
        ),
        migrations.CreateModel(
            name='Engagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', django_fsm.FSMField(choices=[('partner_contacted', 'Partner Contacted'), ('report_submitted', 'Report Submitted'), ('final', 'Final Report')], default='partner_contacted', max_length=30, protected=True, verbose_name='status')),
                ('partner_contacted_at', models.DateField(blank=True, null=True, verbose_name='date partner was contacted')),
                ('type', models.CharField(choices=[('audit', 'Audit'), ('ma', 'Micro Assessment'), ('sc', 'Spot Check')], max_length=10, verbose_name='engagement type')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='period start date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='period end date')),
                ('total_value', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='Total value of selected FACE form(s)')),
                ('date_of_field_visit', models.DateField(blank=True, null=True, verbose_name='date of field visit')),
                ('date_of_draft_report_to_ip', models.DateField(blank=True, null=True, verbose_name='date draft report issued to IP')),
                ('date_of_comments_by_ip', models.DateField(blank=True, null=True, verbose_name='date comments received by IP')),
                ('date_of_draft_report_to_unicef', models.DateField(blank=True, null=True, verbose_name='date draft report issued to UNICEF')),
                ('date_of_comments_by_unicef', models.DateField(blank=True, null=True, verbose_name='date comments received by UNICEF')),
                ('date_of_report_submit', models.DateField(blank=True, null=True, verbose_name='date report submitted')),
                ('date_of_final_report', models.DateField(blank=True, null=True, verbose_name='date report finalized')),
                ('amount_refunded', models.IntegerField(blank=True, null=True, verbose_name='amount refunded')),
                ('additional_supporting_documentation_provided', models.IntegerField(blank=True, null=True, verbose_name='additional supporting documentation provided')),
                ('justification_provided_and_accepted', models.IntegerField(blank=True, null=True, verbose_name='justification provided and accepted')),
                ('write_off_required', models.IntegerField(blank=True, null=True, verbose_name='write off required')),
                ('pending_unsupported_amount', models.IntegerField(blank=True, null=True, verbose_name='pending unsupported amount')),
            ],
            options={
                'verbose_name': 'Engagement',
                'verbose_name_plural': 'Engagements',
            },
        ),
        migrations.CreateModel(
            name='FinancialFinding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Title (Category)')),
                ('local_amount', models.IntegerField(verbose_name='Amount (local)')),
                ('amount', models.IntegerField(verbose_name='Amount (USD)')),
                ('description', models.TextField(verbose_name='description')),
                ('recommendation', models.TextField(blank=True, verbose_name='recommendation')),
                ('ip_comments', models.TextField(blank=True, verbose_name='IP comments')),
            ],
        ),
        migrations.CreateModel(
            name='Finding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.CharField(choices=[('high', 'High'), ('low', 'Low')], max_length=4, verbose_name='priority')),
                ('category_of_observation', models.CharField(choices=[('expenditure_not_for_programme_purposes', 'Expenditure not for programme purposes'), ('expenditure_claimed_but_activities_not_undertaken', 'Expenditure claimed but activities not undertaken'), ('expenditure_exceeds_the_approved_budget_rate_or_amount', 'Expenditure exceeds the approved budget rate or amount'), ('expenditure_not_recorded_in_the_correct_period_or_face_form', 'Expenditure not recorded in the correct period or FACE form'), ('advance_claimed_as_expenditure', 'Advance claimed as expenditure'), ('commitments_treated_as_expenditure', 'Commitments treated as expenditure'), ('signatories_on_face_forms_different_from_ip_agreement', 'Signatories on FACE forms different from those in the IP Agreement'), ('no_supporting_documentation', 'No supporting documentation'), ('insufficient_supporting_documentation', 'Insufficient supporting documentation'), ('no_proof_of_payment', 'No proof of payment'), ('no_proof_of_goods_received', 'No proof of goods / services received'), ('poor_record_keeping', 'Poor record keeping'), ('lack_of_audit_trail', 'Lack of audit trail (FACE forms do not reconcile with IPs and UNICEF\u2019s accounting records)'), ('lack_of_bank_reconciliations', 'Lack of bank reconciliations'), ('lack_of_segregation_of_duties', 'Lack of segregation of duties'), ('vat_incorrectly_claimed', 'VAT incorrectly claimed'), ('ineligible_salary_cost', 'Ineligible salary cost'), ('dsa_rates_exceeded', 'DSA rates exceeded'), ('support_costs_incorrectly_calculated', 'Support costs incorrectly calculated'), ('no_competitive_procedures_for_the_award_of_contracts', 'No competitive procedures for the award of contracts'), ('supplier\u2019s_invoices_not_approved', 'Supplier\u2019s invoices not approved'), ('no_evaluation_of_goods_received', 'No evaluation of goods received'), ('lack_of_procedures_for_verification_of_assets', 'Lack of procedures for verification of assets'), ('goods_/_assets_not_used_for_the_intended_purposes', 'Goods / Assets not used for the intended purposes'), ('lack_of_written_agreement_between_ip_and_sub-contractee', 'Lack of written agreement between IP and sub-contractee'), ('lack_of_sub-contractee_financial', 'Lack of sub-contractee financial / substantive progress reporting on file'), ('failure_to_implement_prior_assurance_activity_recommendations', 'Failure to implement prior assurance activity recommendations'), ('other', 'Other')], max_length=100, verbose_name='category of observation')),
                ('recommendation', models.TextField(blank=True, verbose_name='recommendation')),
                ('agreed_action_by_ip', models.TextField(blank=True, verbose_name='agreed action by IP')),
                ('deadline_of_action', models.DateField(blank=True, null=True, verbose_name='deadline of action')),
            ],
        ),
        migrations.CreateModel(
            name='PurchaseOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('order_number', models.CharField(blank=True, max_length=30, null=True, unique=True, verbose_name='purchase order number')),
                ('contract_start_date', models.DateField(blank=True, null=True, verbose_name='contract start date')),
                ('contract_end_date', models.DateField(blank=True, null=True, verbose_name='contract end date')),
                ('audit_organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchase_orders', to='audit.AuditOrganization', verbose_name='auditor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Audit',
            fields=[
                ('engagement_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='audit.Engagement')),
                ('audited_expenditure', models.IntegerField(blank=True, null=True, verbose_name='Audited expenditure (USD)')),
                ('financial_findings', models.IntegerField(blank=True, null=True, verbose_name='Financial findings (USD)')),
                ('percent_of_audited_expenditure', models.IntegerField(blank=True, null=True, verbose_name='% of audited expenditure')),
                ('audit_opinion', models.CharField(blank=True, choices=[('unqualified', 'Unqualified'), ('qualified', 'Qualified'), ('disclaimer_opinion', 'Disclaimer opinion'), ('adverse_opinion', 'Adverse opinion')], max_length=20, null=True, verbose_name='audit opinion')),
                ('number_of_financial_findings', models.IntegerField(blank=True, null=True, verbose_name='number of financial findings')),
                ('high_risk', models.IntegerField(blank=True, null=True, verbose_name='high risk')),
                ('medium_risk', models.IntegerField(blank=True, null=True, verbose_name='medium risk')),
                ('low_risk', models.IntegerField(blank=True, null=True, verbose_name='low risk')),
                ('recommendation', models.TextField(blank=True, verbose_name='recommendation')),
                ('audit_observation', models.TextField(blank=True, verbose_name='audit observation')),
                ('ip_response', models.TextField(blank=True, verbose_name='IP response')),
            ],
            options={
                'verbose_name': 'Audit',
                'verbose_name_plural': 'Audits',
            },
            bases=('audit.engagement',),
        ),
        migrations.CreateModel(
            name='MicroAssessment',
            fields=[
                ('engagement_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='audit.Engagement')),
            ],
            options={
                'verbose_name': 'Micro Assessment',
                'verbose_name_plural': 'Micro Assessments',
            },
            bases=('audit.engagement',),
        ),
        migrations.CreateModel(
            name='SpotCheck',
            fields=[
                ('engagement_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='audit.Engagement')),
                ('total_amount_tested', models.PositiveIntegerField(blank=True, null=True, verbose_name='total amount tested')),
                ('total_amount_of_ineligible_expenditure', models.PositiveIntegerField(blank=True, null=True, verbose_name='total amount of ineligible expenditure')),
                ('amount_of_ineligible_expenditures', models.PositiveIntegerField(blank=True, null=True, verbose_name='amount of ineligible expenditures')),
                ('internal_controls', models.TextField(blank=True, verbose_name='internal controls')),
            ],
            options={
                'verbose_name': 'Spot Check',
                'verbose_name_plural': 'Spot Checks',
            },
            bases=('audit.engagement',),
        ),
        migrations.AddField(
            model_name='engagement',
            name='agreement',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='audit.PurchaseOrder', verbose_name='purchase order'),
        ),
        migrations.AddField(
            model_name='engagement',
            name='partner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='partners.PartnerOrganization', verbose_name='partner'),
        ),
        migrations.AddField(
            model_name='engagement',
            name='staff_members',
            field=models.ManyToManyField(to='audit.AuditOrganizationStaffMember', verbose_name='staff members'),
        ),
        migrations.AddField(
            model_name='finding',
            name='spot_check',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='findings', to='audit.SpotCheck', verbose_name='spot check'),
        ),
        migrations.AddField(
            model_name='financialfinding',
            name='audit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='financial_finding_set', to='audit.Audit', verbose_name='audit'),
        ),
        migrations.AddField(
            model_name='detailedfindinginfo',
            name='micro_assesment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='findings', to='audit.MicroAssessment', verbose_name='micro assessment'),
        ),
    ]
