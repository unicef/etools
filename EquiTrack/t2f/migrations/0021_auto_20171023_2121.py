# -*- coding: utf-8 -*-
# Generated by Django 1.9.10 on 2017-10-23 21:21
from __future__ import unicode_literals

import logging

from django.db import connection, migrations

logger = logging.getLogger(__name__)


def sections_to_sectors(apps, schema_editor):

    MAPPER = {
        'Cambodia': {
            'Child Survival and Development': 'Child Survival & Development',
        },
        'Indonesia': {
            'Child Survival and Development': 'Child Survival & Development (CSD)',
        },
        'Kyrgyzstan': {
            'Education': 'Education & ECD',
            'ADAP': 'Youth and Adolescent Development',
            'WASH': 'WASH & DRR',
        },
        'Rwanda': {
            'PME': 'Planning, Monitoring and Evaluation',
            'CSD': 'Child Survival and Development',
            'CAP': 'Communication, Advocacy and Partnerships',
            'Partnerships': 'Communication, Advocacy and Partnerships',
        },
        'Kenya': {
            'Emergency and Field Operations': 'Emergency & Field Operations',
            'PME': 'Planning, Monitoring & Evaluation',
            'Social Policy and Protection': 'Social Policy',
            'HIV/AIDS': 'HIV and AIDS',
            'C4D': 'Communication for Development (C4D)',
            "Rep's Office": 'Front Office',
            'Advocacy and Partnerships': 'Advocacy & Partnerships',
            'Basic Education': 'Education',
        },
        'Ethiopia': {
            'PME': 'PMU',
        },
        'Libya': {
            'PRIME': 'PME',
            'Basic Education': 'Education',
        },
        'Liberia': {
            'Basic Education': 'Education',
        },
        'Lebanon': {
            'Coordination': 'Humanitarian Coordination',
            'Policy and Advocacy': 'Social Protection',
            'Youth': 'Child Protection',
            'Winterization': 'Winter',
            'NFI and Supply': 'Operations',
            'ICT': 'Operations'
        },
        'South Africa': {
            'Health': 'Health and Nutrition',
            'Child Protection': 'Child Protection & Social Policy',
            'Education': 'Basic Education & Adolescent Development',
            'Basic Education': 'Basic Education & Adolescent Development',
        },
        'Jordan': {
            'Health and Nutrition': 'Health & Nutrition',
        },
        'Iraq': {
            'Planning Monitoring and Evaluation': 'Planning, Monitoring & Evaluation (PME)',
            'Field Operations': 'Field Operations & RRM',
            'Child Protection': 'Child Protection & Adolescent Development',
            'Basic Education': 'Education',
            'Field Operations and RRM': 'Field Operations & RRM',
            "Deputy Rep.Office": 'Deputy Rep Office',
            "Deputy Rep. Office": 'Deputy Rep Office',
        },
        'Syria': {
            'Field Coordination': 'Field Operations',
            'ICT': 'Operations',
            'Education Sector': 'Education',
            'PME': 'M&E',
            'Child Protection': 'Social Policy & Child Protection',
            "Regional Director's Office": 'Planning & HACT',
            'Child Survival': 'Health and Nutrition',
            'Deputy Rep.Office': 'Deputy Rep. Office',
            'C4D': 'Communication for Development',
            'Emergency': 'Field Operations',
            'Basic Education': 'Education',

        },
        'Sudan': {
            'PME': 'Planning Monitoring and Evaluation',
        },
        'Afghanistan': {
            'Risk Assurance': 'Operations',
            'Finance': 'Operations',
            'PRIME': 'SPPME',
            'Resource Mobilization & Budget Unit': 'Programme Coordination',
            'ICT': 'Operations',
            'Deputy Rep. Office': 'Deputy Representative’s Office',
            'Deputy Rep Office': 'Deputy Representative’s Office',
            'CFO': 'Communication Advocacy& Civic Engagement[CACE]'
        },
        'Nepal': {
            'CFO': 'C4D',
        },
        'Sierra Leone': {
            'HivAids': 'CSD - HIV/AIDS',
            'PRIME': 'SPPM&E',
            "Rep's Office": "Representative's Office",
            "Regional Director's Office": "Deputy Representative's Office",
            "Chief of Operations Office": "Operations",
            'Nutrition': 'CSD - Nutrition',
            'HIV/AIDS': 'CSD - HIV/AIDS',
            'Health': 'CSD - Health',
            'WASH': 'CSD - WASH',
            'Supply and Procurement': 'Supply & Procurement',
            'PME': 'SPPM&E',
        },
        'Senegal': {
            'Child Survival and Development': 'Child Survival & Development',
            'Social Policy': 'Social Policy & Advocacy',
        },
        'Burkina Faso': {
            'Nutrition': 'Health & Nutrition',
            'SPPM&E': 'SPPME',
            'Health': 'Health & Nutrition'
        },
        'Nigeria': {
            "Regional Director's Office": 'Deputy Reps Office',
            "Rep's Office": 'Representative Office',
        },
        'Guinea': {
            'Child Survival and Development': 'Child Survival & Development',
        },
    }

    Travel = apps.get_model('t2f', 'Travel')
    Sector = apps.get_model('reports', 'Sector')
    Workspace = apps.get_model('users', 'Country')
    tenant = Workspace.objects.get(schema_name=connection.schema_name)
    country_mapper = MAPPER.get(tenant.name, {})
    total = Travel.objects.count()

    found = not_found = 0
    missing = []
    for travel in Travel.objects.all():
        if travel.section:
            if travel.section.name in country_mapper and Sector.objects.filter(
                    name=country_mapper[travel.section.name]).exists():
                related_sector = Sector.objects.get(name=country_mapper[travel.section.name])

            elif Sector.objects.filter(name=travel.section.name).exists():
                related_sector = Sector.objects.get(name=travel.section.name)
            else:
                related_sector = None
                not_found += 1
                if travel.section.name not in missing:
                    missing.append(travel.section.name)

            if related_sector:
                found += 1
                travel.sector = related_sector
                travel.save()
    report_line = '{}: Total: {} Found: {} - Not Found: {} {}'.format(
        connection.schema_name, total, found, not_found, missing)
    logging.info(report_line)


def clean_sectors(apps, schema_editor):
    Travel = apps.get_model('t2f', 'Travel')
    Travel.objects.all().update(sector=None)


class Migration(migrations.Migration):

    dependencies = [
        ('t2f', '0020_travel_sector'),
    ]

    operations = [
        migrations.RunPython(sections_to_sectors, clean_sectors),
    ]
