# Generated by Django 3.2.6 on 2022-08-18 09:37

import logging

from django.db import migrations, transaction, connection, models


def get_user_profile(apps, user, no_profile):
    UserProfile = apps.get_model('users', 'UserProfile')

    if not hasattr(user, 'profile'):
        no_profile += 1
        logging.warning(f"User {user.pk}: {user.username} has no profile. "
                        f"Adding a user profile..")
        return UserProfile.objects.create(user=user)
    return user.profile


def get_user_countries(apps, profile, uat_country):
    Country = apps.get_model('users', 'Country')
    filters = models.Q()
    if profile.country:
        filters |= models.Q(id=profile.country.pk)
    if profile.country_override:
        filters |= models.Q(id=profile.country_override.pk)
    if profile.countries_available.exists():
        filters |= models.Q(id__in=profile.countries_available.values_list('pk', flat=True))

    countries_qs = Country.objects \
        .filter(filters) \
        .exclude(name__in=['Global'])

    if not filters:
        # If the user has no country set, add UAT to country and deactivate the user..")
        profile.country_override = uat_country
        profile.save(update_fields=['country_override'])
        profile.countries_available.add(uat_country)

        profile.user.is_active = False
        profile.user.save(update_fields=['is_active'])

        return Country.objects.filter(name='UAT'), True
    return countries_qs, False


def fwd_migrate_to_user_realms(apps, schema_editor):
    User = apps.get_model('users', 'User')
    Realm = apps.get_model('users', 'Realm')
    Country = apps.get_model('users', 'Country')
    Group = apps.get_model('auth', 'Group')
    Organzation = apps.get_model('organizations', 'Organization')

    with transaction.atomic():
        no_profile, no_countries = 0, 0
        unicef_org, _ = Organzation.objects.get_or_create(
            name='UNICEF',
            vendor_number='UNICEF',
            defaults={
                'organization_type': 'UN Agency',
                'cso_type': 'International'
            }
        )
        external_psea_org, _ = Organzation.objects.get_or_create(
            name='EXTERNAL PSEA ASSESSORS',
            vendor_number='EXTERNAL PSEA ASSESSORS',
            defaults={
                'organization_type': 'N/A',
            }
        )
        uat_country = Country.objects.get(name='UAT')

        unicef_user_group, _ = Group.objects.get_or_create(name="UNICEF User")
        external_psea_group, _ = Group.objects.get_or_create(name="PSEA Assessor")
        auditor_group, _ = Group.objects.get_or_create(name="Auditor")
        tpm_group, _ = Group.objects.get_or_create(name="Third Party Monitor")

        logging.info(f'Processing {User.objects.count()} users..')

        for user in User.objects.all() \
                .select_related('profile', 'profile__country', 'profile__country_override') \
                .prefetch_related('groups', 'profile__countries_available'):

            profile = get_user_profile(apps, user, no_profile)
            countries, added_uat = get_user_countries(apps, profile, uat_country)
            if added_uat:
                no_countries += 1
            user.refresh_from_db()

            groups = user.groups.all()
            is_unicef_user = groups.filter(name__contains='UNICEF').count() > 0 or 'unicef' in user.email
            is_auditor_staff = hasattr(user, 'purchase_order_auditorstaffmember') and user.purchase_order_auditorstaffmember
            is_tpm_staff = hasattr(user, 'tpmpartners_tpmpartnerstaffmember') and user.tpmpartners_tpmpartnerstaffmember

            realm_list = []

            if is_unicef_user:
                for country in countries:
                    if groups.exists():
                        for group in groups:
                            realm_list.append(Realm(
                                user=user,
                                country=country,
                                organization=unicef_org,
                                group=group,
                                is_active=user.is_active
                            ))
                    # if unicef user has no groups, set UNICEF User group
                    else:
                        realm_list.append(Realm(
                            user=user,
                            country=country,
                            organization=unicef_org,
                            group=unicef_user_group,
                            is_active=user.is_active
                        ))

            if is_auditor_staff:
                auditor_organization = user.purchase_order_auditorstaffmember.auditor_firm.organization
                for country in countries:
                    if groups.exists():
                        for group in groups:
                            realm_list.append(Realm(
                                user=user,
                                country=country,
                                organization=auditor_organization,
                                group=group,
                                is_active=not user.purchase_order_auditorstaffmember.hidden
                            ))
                    # if audit staff member has no group set, add Auditor group
                    else:
                        realm_list.append(Realm(
                            user=user,
                            country=country,
                            organization=auditor_organization,
                            group=auditor_group,
                            is_active=user.is_active
                        ))

            if is_tpm_staff:
                tpm_organization = user.tpmpartners_tpmpartnerstaffmember.tpm_partner.organization
                for country in countries:
                    if groups.exists():
                        for group in groups:
                            realm_list.append(Realm(
                                user=user,
                                country=country,
                                organization=tpm_organization,
                                group=group,
                                is_active=user.is_active
                            ))
                    # if TPM staff member has no group set, add Third Party Monitor group
                    else:
                        realm_list.append(Realm(
                            user=user,
                            country=country,
                            organization=tpm_organization,
                            group=tpm_group,
                            is_active=user.is_active
                        ))
            # check if user is a partner staff member for each country tenant
            for country in countries:
                connection.set_tenant(country)
                if hasattr(user, 'partner_staff_member') and user.partner_staff_member:
                    partner_staff = user.partner_staff_member
                    if not partner_staff.partner.organization:
                        logging.error(
                            f"Partner with id:{partner_staff.partner.pk} has no organization set. Skipping..")
                        continue
                    for group in groups:
                        realm_list.append(Realm(
                            user=user,
                            country=country,
                            organization=partner_staff.partner.organization,
                            group=group,
                            is_active=partner_staff.active
                        ))
                elif not any([is_unicef_user, is_auditor_staff, is_tpm_staff]):
                    realm_list.append(Realm(
                        user=user,
                        country=country,
                        organization=external_psea_org,
                        group=external_psea_group,
                        is_active=user.is_active
                    ))

            Realm.objects.bulk_create(realm_list)

        logging.info(f'{no_profile} users had no profile.')
        logging.info(f'{no_countries} users that had no countries set, were added to UAT.')


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0020_realms'),
    ]

    operations = [
        migrations.RunPython(fwd_migrate_to_user_realms, migrations.RunPython.noop)
    ]
