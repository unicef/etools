# Generated by Django 3.2.19 on 2023-10-24 11:31

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_fsm
import etools.applications.audit.models
import etools.libraries.djangolib.fields
import etools.libraries.djangolib.models
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('purchase_order', '0002_initial'),
        # ('partners', '0002_initial'),
        # ('action_points', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        # ('reports', '0002_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Engagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', django_fsm.FSMField(choices=[('partner_contacted', 'IP Contacted'), ('report_submitted', 'Report Submitted'), ('final', 'Final Report'), ('cancelled', 'Cancelled')], default='partner_contacted', max_length=30, verbose_name='Status')),
                ('partner_contacted_at', models.DateField(blank=True, null=True, verbose_name='Date IP was contacted')),
                ('engagement_type', models.CharField(choices=[('audit', 'Audit'), ('ma', 'Micro Assessment'), ('sc', 'Spot Check'), ('sa', 'Special Audit')], max_length=10, verbose_name='Engagement Type')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Period Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Period End Date')),
                ('total_value', models.DecimalField(decimal_places=2, default=0, max_digits=20, verbose_name='Total value of selected FACE form(s)')),
                ('exchange_rate', models.DecimalField(decimal_places=2, default=0, max_digits=20, verbose_name='Exchange Rate')),
                ('currency_of_report', etools.libraries.djangolib.fields.CurrencyField(blank=True, choices=[('GIP', 'GIP'), ('KPW', 'KPW'), ('XEU', 'XEU'), ('BHD', 'BHD'), ('BIF', 'BIF'), ('BMD', 'BMD'), ('BSD', 'BSD'), ('AFN', 'AFN'), ('ALL', 'ALL'), ('AMD', 'AMD'), ('AUD', 'AUD'), ('AZN', 'AZN'), ('BAM', 'BAM'), ('BBD', 'BBD'), ('BDT', 'BDT'), ('BZD', 'BZD'), ('CUP1', 'CUP1'), ('BTN', 'BTN'), ('ZWL', 'ZWL'), ('AWG', 'AWG'), ('CUC', 'CUC'), ('VEF01', 'VEF01'), ('BND', 'BND'), ('BRL', 'BRL'), ('ARS', 'ARS'), ('ETB', 'ETB'), ('EUR', 'EUR'), ('FJD', 'FJD'), ('GBP', 'GBP'), ('GEL', 'GEL'), ('GHS', 'GHS'), ('GNF', 'GNF'), ('GTQ', 'GTQ'), ('GYD', 'GYD'), ('HNL', 'HNL'), ('CAD', 'CAD'), ('CDF', 'CDF'), ('CLP', 'CLP'), ('CNY', 'CNY'), ('COP', 'COP'), ('CRC', 'CRC'), ('CUP', 'CUP'), ('CVE', 'CVE'), ('DJF', 'DJF'), ('DKK', 'DKK'), ('DOP', 'DOP'), ('DZD', 'DZD'), ('EGP', 'EGP'), ('HRK', 'HRK'), ('LVL', 'LVL'), ('LYD', 'LYD'), ('MAD', 'MAD'), ('MGA', 'MGA'), ('MKD', 'MKD'), ('KWD', 'KWD'), ('KYD', 'KYD'), ('LBP', 'LBP'), ('LKR', 'LKR'), ('MDL', 'MDL'), ('KZT', 'KZT'), ('LRD', 'LRD'), ('BOB', 'BOB'), ('HKD', 'HKD'), ('CHF', 'CHF'), ('KES', 'KES'), ('MYR', 'MYR'), ('NGN', 'NGN'), ('KMF', 'KMF'), ('SCR', 'SCR'), ('SEK', 'SEK'), ('TTD', 'TTD'), ('PKR', 'PKR'), ('NIO', 'NIO'), ('RWF', 'RWF'), ('BWP', 'BWP'), ('JMD', 'JMD'), ('TJS', 'TJS'), ('UYU', 'UYU'), ('RON', 'RON'), ('PYG', 'PYG'), ('SYP', 'SYP'), ('LAK', 'LAK'), ('ERN', 'ERN'), ('SLE', 'SLE'), ('PLN', 'PLN'), ('JOD', 'JOD'), ('ILS', 'ILS'), ('AED', 'AED'), ('NPR', 'NPR'), ('NZD', 'NZD'), ('SGD', 'SGD'), ('JPY', 'JPY'), ('PAB', 'PAB'), ('ZMW', 'ZMW'), ('CZK', 'CZK'), ('SOS', 'SOS'), ('LTL', 'LTL'), ('KGS', 'KGS'), ('SHP', 'SHP'), ('BGN', 'BGN'), ('TOP', 'TOP'), ('MVR', 'MVR'), ('VEF02', 'VEF02'), ('TMT', 'TMT'), ('GMD', 'GMD'), ('MZN', 'MZN'), ('RSD', 'RSD'), ('MWK', 'MWK'), ('PGK', 'PGK'), ('MXN', 'MXN'), ('XAF', 'XAF'), ('VND', 'VND'), ('INR', 'INR'), ('NOK', 'NOK'), ('XPF', 'XPF'), ('SSP', 'SSP'), ('IQD', 'IQD'), ('SRD', 'SRD'), ('SAR', 'SAR'), ('XCD', 'XCD'), ('IRR', 'IRR'), ('KPW01', 'KPW01'), ('HTG', 'HTG'), ('IDR', 'IDR'), ('XOF', 'XOF'), ('ISK', 'ISK'), ('ANG', 'ANG'), ('NAD', 'NAD'), ('MMK', 'MMK'), ('STD', 'STD'), ('VUV', 'VUV'), ('LSL', 'LSL'), ('SVC', 'SVC'), ('KHR', 'KHR'), ('SZL', 'SZL'), ('RUB', 'RUB'), ('UAH', 'UAH'), ('UGX', 'UGX'), ('THB', 'THB'), ('AOA', 'AOA'), ('YER', 'YER'), ('USD', 'USD'), ('UZS', 'UZS'), ('OMR', 'OMR'), ('SBD', 'SBD'), ('TZS', 'TZS'), ('SDG', 'SDG'), ('WST', 'WST'), ('QAR', 'QAR'), ('MOP', 'MOP'), ('MRU', 'MRU'), ('VEF', 'VEF'), ('TRY', 'TRY'), ('ZAR', 'ZAR'), ('HUF', 'HUF'), ('MUR', 'MUR'), ('PHP', 'PHP'), ('BYN', 'BYN'), ('KRW', 'KRW'), ('TND', 'TND'), ('MNT', 'MNT'), ('PEN', 'PEN')], default='', max_length=5, null=True, verbose_name='Currency of Report')),
                ('date_of_field_visit', models.DateField(blank=True, null=True, verbose_name='Date of Field Visit')),
                ('date_of_draft_report_to_ip', models.DateField(blank=True, null=True, verbose_name='Date Draft Report Issued to IP')),
                ('date_of_comments_by_ip', models.DateField(blank=True, null=True, verbose_name='Date Comments Received from IP')),
                ('date_of_draft_report_to_unicef', models.DateField(blank=True, null=True, verbose_name='Date Draft Report Issued to UNICEF')),
                ('date_of_comments_by_unicef', models.DateField(blank=True, null=True, verbose_name='Date Comments Received from UNICEF')),
                ('date_of_report_submit', models.DateField(blank=True, null=True, verbose_name='Date Report Submitted')),
                ('date_of_final_report', models.DateField(blank=True, null=True, verbose_name='Date Report Finalized')),
                ('date_of_cancel', models.DateField(blank=True, null=True, verbose_name='Date Report Cancelled')),
                ('amount_refunded', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=20, verbose_name='Amount Refunded')),
                ('additional_supporting_documentation_provided', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=20, verbose_name='Additional Supporting Documentation Provided')),
                ('justification_provided_and_accepted', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=20, verbose_name='Justification Provided and Accepted')),
                ('write_off_required', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=20, verbose_name='Impairment')),
                ('explanation_for_additional_information', models.TextField(blank=True, verbose_name='Provide explanation for additional information received from the IP or add attachments')),
                ('joint_audit', models.BooleanField(blank=True, default=False, verbose_name='Joint Audit')),
                ('year_of_audit', models.PositiveSmallIntegerField(db_index=True, default=etools.applications.audit.models.get_current_year, null=True)),
                ('shared_ip_with', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('DPKO', 'DPKO'), ('ECA', 'ECA'), ('ECLAC', 'ECLAC'), ('ESCWA', 'ESCWA'), ('FAO', 'FAO'), ('ILO', 'ILO'), ('IOM', 'IOM'), ('OHCHR', 'OHCHR'), ('UN', 'UN'), ('UN Women', 'UN Women'), ('UNAIDS', 'UNAIDS'), ('UNDP', 'UNDP'), ('UNESCO', 'UNESCO'), ('UNFPA', 'UNFPA'), ('UN - Habitat', 'UN - Habitat'), ('UNHCR', 'UNHCR'), ('UNODC', 'UNODC'), ('UNOPS', 'UNOPS'), ('UNRWA', 'UNRWA'), ('UNSC', 'UNSC'), ('UNU', 'UNU'), ('WB', 'WB'), ('WFP', 'WFP'), ('WHO', 'WHO')], max_length=20), blank=True, default=list, size=None, verbose_name='Shared Audit with')),
                ('cancel_comment', models.TextField(blank=True, verbose_name='Cancel Comment')),
                ('reference_number', models.CharField(max_length=100, null=True, verbose_name='Reference Number')),
                ('active_pd', models.ManyToManyField(blank=True, to='partners.Intervention', verbose_name='Active PDs')),
                ('agreement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='purchase_order.PurchaseOrder', verbose_name='Purchase Order')),
                ('authorized_officers', models.ManyToManyField(blank=True, related_name='engagement_authorizations', to=settings.AUTH_USER_MODEL, verbose_name='Authorized Officers')),
                ('offices', models.ManyToManyField(blank=True, related_name='engagements', to='reports.Office', verbose_name='Offices')),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='partners.partnerorganization', verbose_name='Partner')),
                ('po_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='purchase_order.purchaseorderitem', verbose_name='PO Item Number')),
                ('sections', models.ManyToManyField(blank=True, related_name='engagements', to='reports.Section', verbose_name='Sections')),
                ('staff_members', models.ManyToManyField(related_name='engagements', to=settings.AUTH_USER_MODEL, verbose_name='Staff Members')),
                ('users_notified', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='Notified When Completed')),
            ],
            options={
                'verbose_name': 'Engagement',
                'verbose_name_plural': 'Engagements',
                'ordering': ('id',),
            },
            bases=(etools.libraries.djangolib.models.InheritedModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='EngagementActionPoint',
            fields=[
            ],
            options={
                'verbose_name': 'Engagement Action Point',
                'verbose_name_plural': 'Engagement Action Points',
                'abstract': False,
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('action_points.actionpoint',),
        ),
        migrations.CreateModel(
            name='Audit',
            fields=[
                ('engagement_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='audit.engagement')),
                ('audited_expenditure', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=20, verbose_name='Audited Expenditure $')),
                ('financial_findings', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=20, verbose_name='Financial Findings $')),
                ('audited_expenditure_local', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='Audited Expenditure Local Currency')),
                ('financial_findings_local', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='Financial Findings Local Currency')),
                ('audit_opinion', models.CharField(blank=True, choices=[('unqualified', 'Unqualified'), ('qualified', 'Qualified'), ('disclaimer_opinion', 'Disclaimer opinion'), ('adverse_opinion', 'Adverse opinion')], default='', max_length=20, verbose_name='Audit Opinion')),
            ],
            options={
                'verbose_name': 'Audit',
                'verbose_name_plural': 'Audits',
                'ordering': ('id',),
            },
            bases=('audit.engagement',),
        ),
        migrations.CreateModel(
            name='MicroAssessment',
            fields=[
                ('engagement_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='audit.engagement')),
                ('questionnaire_version', models.PositiveSmallIntegerField(default=2)),
            ],
            options={
                'verbose_name': 'Micro Assessment',
                'verbose_name_plural': 'Micro Assessments',
                'ordering': ('id',),
            },
            bases=('audit.engagement',),
        ),
        migrations.CreateModel(
            name='SpecialAudit',
            fields=[
                ('engagement_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='audit.engagement')),
            ],
            options={
                'verbose_name': 'Special Audit',
                'verbose_name_plural': 'Special Audits',
                'ordering': ('id',),
            },
            bases=('audit.engagement',),
        ),
        migrations.CreateModel(
            name='SpotCheck',
            fields=[
                ('engagement_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='audit.engagement')),
                ('total_amount_tested', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=20, verbose_name='Total Amount Tested')),
                ('total_amount_of_ineligible_expenditure', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=20, verbose_name='Total Amount of Ineligible Expenditure')),
                ('internal_controls', models.TextField(blank=True, verbose_name='Internal Controls')),
            ],
            options={
                'verbose_name': 'Spot Check',
                'verbose_name_plural': 'Spot Checks',
                'ordering': ('id',),
            },
            bases=('audit.engagement',),
        ),
        migrations.CreateModel(
            name='RiskCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(db_index=True, editable=False, verbose_name='order')),
                ('header', models.CharField(max_length=500, verbose_name='Header')),
                ('category_type', models.CharField(choices=[('default', 'Default'), ('primary', 'Primary')], default='default', max_length=20, verbose_name='Category Type')),
                ('code', models.CharField(blank=True, max_length=20, verbose_name='Code')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='audit.riskcategory', verbose_name='Parent')),
            ],
            options={
                'verbose_name_plural': 'Risk Categories',
                'ordering': ('order',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RiskBluePrint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(db_index=True, editable=False, verbose_name='order')),
                ('weight', models.PositiveSmallIntegerField(default=1, verbose_name='Weight')),
                ('is_key', models.BooleanField(default=False, verbose_name='Is Key')),
                ('header', models.TextField(verbose_name='Header')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blueprints', to='audit.riskcategory', verbose_name='Category')),
            ],
            options={
                'verbose_name_plural': 'Risk Blueprints',
                'ordering': ('order',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Risk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.SmallIntegerField(blank=True, choices=[(0, 'N/A'), (1, 'Low'), (2, 'Medium'), (3, 'Significant'), (4, 'High')], null=True, verbose_name='Value')),
                ('extra', models.JSONField(blank=True, null=True, verbose_name='Extra')),
                ('blueprint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='risks', to='audit.riskblueprint', verbose_name='Blueprint')),
                ('engagement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='risks', to='audit.engagement', verbose_name='Engagement')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='SpecificProcedure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('finding', models.TextField(blank=True)),
                ('audit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='specific_procedures', to='audit.specialaudit', verbose_name='Special Audit')),
            ],
            options={
                'verbose_name': 'Specific Procedure',
                'verbose_name_plural': 'Specific Procedures',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='SpecialAuditRecommendation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('audit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='other_recommendations', to='audit.specialaudit', verbose_name='Special Audit')),
            ],
            options={
                'verbose_name': 'Special Audit Recommendation',
                'verbose_name_plural': 'Special Audit Recommendations',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='KeyInternalControl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation', models.TextField(verbose_name='Recommendation')),
                ('audit_observation', models.TextField(verbose_name='Audit Observation')),
                ('ip_response', models.TextField(verbose_name='IP response')),
                ('audit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='key_internal_controls', to='audit.audit', verbose_name='Audit')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Finding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.CharField(choices=[('high', 'High'), ('low', 'Low')], max_length=4, verbose_name='Priority')),
                ('category_of_observation', models.CharField(choices=[('expenditure_not_for_programme_purposes', 'Expenditure not for programme purposes'), ('expenditure_claimed_but_activities_not_undertaken', 'Expenditure claimed but activities not undertaken'), ('expenditure_exceeds_the_approved_budget_rate_or_amount', 'Expenditure exceeds the approved budget rate or amount'), ('expenditure_not_recorded_in_the_correct_period_or_face_form', 'Expenditure not recorded in the correct period or FACE form'), ('advance_claimed_as_expenditure', 'Advance claimed as expenditure'), ('commitments_treated_as_expenditure', 'Commitments treated as expenditure'), ('signatories_on_face_forms_different_from_ip_agreement', 'Signatories on FACE forms different from those in the IP Agreement'), ('no_supporting_documentation', 'No supporting documentation'), ('insufficient_supporting_documentation', 'Insufficient supporting documentation'), ('no_proof_of_payment', 'No proof of payment'), ('no_proof_of_goods_received', 'No proof of goods / services received'), ('poor_record_keeping', 'Poor record keeping'), ('lack_of_audit_trail', 'Lack of audit trail (FACE forms do not reconcile with IPs and UNICEF’s accounting records)'), ('lack_of_bank_reconciliations', 'Lack of bank reconciliations'), ('lack_of_segregation_of_duties', 'Lack of segregation of duties'), ('vat_incorrectly_claimed', 'VAT incorrectly claimed'), ('ineligible_salary_cost', 'Ineligible salary cost'), ('dsa_rates_exceeded', 'DSA rates exceeded'), ('support_costs_incorrectly_calculated', 'Support costs incorrectly calculated'), ('no_competitive_procedures_for_the_award_of_contracts', 'No competitive procedures for the award of contracts'), ('supplier’s_invoices_not_approved', 'Supplier’s invoices not approved'), ('no_evaluation_of_goods_received', 'No evaluation of goods received'), ('lack_of_procedures_for_verification_of_assets', 'Lack of procedures for verification of assets'), ('goods_/_assets_not_used_for_the_intended_purposes', 'Goods / Assets not used for the intended purposes'), ('lack_of_written_agreement_between_ip_and_sub-contractee', 'Lack of written agreement between IP and sub-contractee'), ('lack_of_sub-contractee_financial', 'Lack of sub-contractee financial / substantive progress reporting on file'), ('failure_to_implement_prior_assurance_activity_recommendations', 'Failure to implement prior assurance activity recommendations'), ('other', 'Other')], max_length=100, verbose_name='Category of Observation')),
                ('recommendation', models.TextField(blank=True, verbose_name='Finding and Recommendation')),
                ('agreed_action_by_ip', models.TextField(blank=True, verbose_name='Agreed Action by IP')),
                ('deadline_of_action', models.DateField(blank=True, null=True, verbose_name='Deadline of Action')),
                ('spot_check', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='findings', to='audit.spotcheck', verbose_name='Spot Check')),
            ],
            options={
                'verbose_name': 'Finding',
                'verbose_name_plural': 'Findings',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='FinancialFinding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[('no-supporting-documentation', 'No supporting documentation'), ('insufficient-supporting-documentation', 'Insufficient supporting documentation'), ('cut-off-error', 'Cut-off error'), ('expenditure-not-for-project-purposes', 'Expenditure not for project purposes'), ('no-proof-of-payment', 'No proof of payment'), ('no-proof-of-goods-services-received', 'No proof of goods / services received'), ('vat-incorrectly-claimed', 'VAT incorrectly claimed'), ('dsa-rates-exceeded', 'DSA rates exceeded'), ('unreasonable-price', 'Unreasonable price'), ('bank-interest-not-reported', 'Bank interest not reported'), ('support-costs-incorrectly-calculated', 'Support costs incorrectly calculated'), ('expenditure-claimed-but-activities-not-undertaken', 'Expenditure claimed but activities not undertaken'), ('advance-claimed-as-expenditure', 'Advance claimed as expenditure'), ('commitments-treated-as-expenditure', 'Commitments treated as expenditure'), ('ineligible-salary-costs', 'Ineligible salary costs'), ('ineligible-costs-other', 'Ineligible costs (other)')], max_length=255, verbose_name='Title (Category)')),
                ('local_amount', models.DecimalField(decimal_places=2, max_digits=20, verbose_name='Amount (local)')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=20, verbose_name='Amount (USD)')),
                ('description', models.TextField(verbose_name='Description')),
                ('recommendation', models.TextField(blank=True, verbose_name='Recommendation')),
                ('ip_comments', models.TextField(blank=True, verbose_name='IP Comments')),
                ('audit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='financial_finding_set', to='audit.audit', verbose_name='Audit')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='DetailedFindingInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('finding', models.TextField(verbose_name='Description of Finding')),
                ('recommendation', models.TextField(verbose_name='Recommendation and IP Management Response')),
                ('micro_assesment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='findings', to='audit.microassessment', verbose_name='Micro Assessment')),
            ],
            options={
                'verbose_name': 'Detailed Finding Info',
                'verbose_name_plural': 'Detailed Findings Info',
                'ordering': ('id',),
            },
        ),
    ]
