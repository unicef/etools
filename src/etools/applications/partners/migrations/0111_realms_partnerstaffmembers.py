# Generated by Django 3.2.6 on 2022-11-28 12:18
import logging
from django.db import migrations, connection


def migrate_partnerstaffmembers(apps, schema_editor):
    if connection.tenant.schema_name in ['public', 'test']:
        return

    PartnerStaffMember = apps.get_model('partners', 'PartnerStaffMember')
    Country = apps.get_model('users', 'Country')
    Group = apps.get_model('auth', 'Group')
    Realm = apps.get_model('users', 'Realm')
    Organization = apps.get_model('organizations', 'Organization')
    ip_viewer_group, _ = Group.objects.get_or_create(name="IP Viewer")

    country = Country.objects.get(schema_name=connection.tenant.schema_name)
    realm_list = []

    external_psea_org, _ = Organization.objects.get_or_create(
        name='EXTERNAL PSEA ASSESSORS',
        vendor_number='EXTERNAL PSEA ASSESSORS',
    )
    external_psea_group, _ = Group.objects.get_or_create(name="PSEA Assessor")

    for partner_staff in PartnerStaffMember.objects.all():
        user = partner_staff.user
        if not user:
            logging.info(f"No user available for partner staff member with id: {partner_staff.id}")
            continue

        profile = user.profile
        groups = user.old_groups.all()

        if groups.exists():
            for group in groups:
                realm_list.append(dict(
                    user_id=user.id,
                    country_id=country.id,
                    organization_id=partner_staff.partner.organization.id,
                    group_id=group.id,
                    is_active=partner_staff.active
                ))
        # if partner staff member has no groups, add IP Viewer group
        else:
            realm_list.append(dict(
                user_id=user.id,
                country_id=country.id,
                organization_id=partner_staff.partner.organization.id,
                group_id=ip_viewer_group.id,
                is_active=partner_staff.active
            ))

        if user.profile.country:
            user_active_country = user.profile.country
        else:
            user_active_country = user.profile.country_override

        if user_active_country == country:
            profile.organization_id = partner_staff.partner.organization.id
            profile.save(update_fields=['organization_id'])

    unique_realms = [dict(t) for t in {tuple(sorted(d.items())) for d in realm_list}]
    for realm_dict in unique_realms:
        Realm.objects.get_or_create(**realm_dict)

    # cleanup from external psea group created during 0021_migrate_to_realms
    Realm.objects.filter(
        user__in=PartnerStaffMember.objects.all().values_list('user_id', flat=True),
        country_id=country.id,
        organization_id=external_psea_org.id,
        group_id=external_psea_group.id,
    ).delete()


class Migration(migrations.Migration):
    dependencies = [
        ('partners', '0110_alter_partnerorganization_organization'),
        ('users', '0021_migrate_to_realms'),
        ('organizations', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(migrate_partnerstaffmembers, migrations.RunPython.noop),
    ]
