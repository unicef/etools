# Generated by Django 3.2.19 on 2023-10-24 11:13

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import etools.libraries.tenant_support.models
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('organizations', '0001_initial'),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='TPMPartner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('street_address', models.CharField(blank=True, default='', max_length=500, verbose_name='Address')),
                ('city', models.CharField(blank=True, default='', max_length=255, verbose_name='City')),
                ('postal_code', models.CharField(blank=True, default='', max_length=32, verbose_name='Postal Code')),
                ('country', models.CharField(blank=True, default='', max_length=255, verbose_name='Country')),
                ('email', models.CharField(blank=True, default='', max_length=255, verbose_name='Email')),
                ('phone_number', models.CharField(blank=True, default='', max_length=32, verbose_name='Phone Number')),
                ('vision_synced', models.BooleanField(default=False, verbose_name='Synced from VISION')),
                ('blocked', models.BooleanField(default=False, verbose_name='Blocked in VISION')),
                ('hidden', models.BooleanField(default=False, verbose_name='Hidden')),
                ('deleted_flag', models.BooleanField(default=False, verbose_name='Marked For Deletion in VISION')),
                ('countries', models.ManyToManyField(blank=True, to='users.Country')),
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='organizations.organization')),
            ],
            options={
                'verbose_name': 'Organization',
                'verbose_name_plural': 'Organizations',
                'ordering': ('organization__name',),
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='TPMPartnerStaffMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('history', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=128, verbose_name='History'), blank=True, default=list, size=None)),
                ('receive_tpm_notifications', models.BooleanField(default=False, verbose_name='Receive Notifications on TPM Tasks')),
                ('tpm_partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='old_staff_members', to='tpmpartners.tpmpartner', verbose_name='TPM Vendor')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='tpmpartners_tpmpartnerstaffmember', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Staff Member',
                'verbose_name_plural': 'Staff Members',
                'ordering': ('id',),
                'abstract': False,
            },
            bases=(etools.libraries.tenant_support.models.ModelHavingTenantRelationsMixin, models.Model),
        ),
    ]
