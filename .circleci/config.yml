version: 2

parameters:
  base-tag:
    type: string
    default: "latest"


jobs:
  setup:
    machine: true
    steps:
      - checkout
      - run:
          name: Make sure base is up to date and remote
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            BASE_TAG="$(md5sum Pipfile.lock | cut -c1-6)$(md5sum Dockerfile-base | cut -c1-6)"
            TAG=${CIRCLE_BRANCH}
            (curl --silent -f -lSL https://index.docker.io/v1/repositories/unicef/etools-base/tags/$BASE_TAG > /dev/null && echo "Up to date!") ||
            (docker build -t unicef/etools-base:$BASE_TAG -f Dockerfile-base . && docker push unicef/etools-base:$BASE_TAG)
      - run:
          name: Triggering test workflow
          command: |
            BASE_TAG="$(md5sum Pipfile.lock | cut -c1-6)$(md5sum Dockerfile-base | cut -c1-6)"
            curl --user ${CIRCLE_TOKEN}: \
                --data build_parameters[CIRCLE_JOB]=test \
                --data build_parameters[BASE_TAG]=$BASE_TAG \
                --data revision=$CIRCLE_SHA1 \
                https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
  test:
    working_directory: ~/code
    # The primary container is an instance of the first list image listed. Your build commands run in this container.
    docker:
      - image: unicef/etools-base:$BASE_TAG
        environment:
          PGHOST: 127.0.0.1
          DATABASE_URL: "postgis://postgres:postgres@localhost:5432/circle_test"
          DEPLOY_BRANCHES: "develop|staging|master|ci-updates"
      - image: circleci/postgres:9.5-alpine-postgis
        environment:
          POSTGRES_USER: postgres
          PGUSER: postgres
          POSTGRES_DB: circle_test
          POSTGRES_PASSWORD: postgres
      - image: redis
    steps:
      - checkout
      - restore_cache:
          key: deps2-{{ .Branch }}--{{ checksum "Pipfile.lock" }}-{{ checksum ".circleci/config.yml" }}
      - run:
          name: Run Tests
          command: |
            pip install --upgrade tox
            circleci tests split < split_tests
      - save_cache:
          key: deps2-{{ .Branch }}--{{ checksum "Pipfile.lock" }}-{{ checksum ".circleci/config.yml" }}
          paths:
            - "env1"
            - /root/.cache/pips
      - store_artifacts:
          path: build/coverage
          destination: coverage
      - run:
          name: Triggering build_and_deploy job
          command: |
            if [[ $CIRCLE_BRANCH == $DEPLOY_BRANCHES ]]; then
              curl --user ${CIRCLE_TOKEN}: \
                --data build_parameters[CIRCLE_JOB]=build_and_deploy \
                --data revision=$CIRCLE_SHA1 \
                https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
            else
              echo "not triggered - '$CIRCLE_BRANCH' is not a deployable branch: '$DEPLOY_BRANCHES'"
            fi

  build_and_deploy:
    machine: true
    steps:
      - checkout
      - run:
          name: Building the image
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            BASE_TAG=(md5sum Pipfile.lock | cut -c1-5)(md5sum Dockerfile-base | cut -c1-5)
            TAG=${CIRCLE_BRANCH}
            (docker pull unicef/etools-base:$BASE_TAG) ||
            (docker build -t unicef/etools-base:$BASE_TAG -f Dockerfile-base . && docker push unicef/etools-base:$BASE_TAG)
            docker build -build-arg BASE_TAG=$BASE_TAG -t unicef/etools:$TAG .
      - run:
          name: Pushing to Docker Hub
          command: |
            TAG=${CIRCLE_BRANCH}
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push unicef/etools:$TAG


workflows:
  version: 2
  commit:
    jobs:
      - setup
#
#  build_and_test:
#    jobs:
#      - test
#      - build_and_deploy:
#          requires:
#            - test
#          filters:
#            branches:
#              only:
#                - master
#                - staging
#                - develop
#                - test
#                - demo
#                - ci-updates
#                - hotfix
#  setup:
